Edge colourings of multigraphs
Das Kantenfärbungsproblem besteht darin, den chromatischen Index eines (Multi-)Graphen G zu ermitteln, d.h. die minimale Anzahl an Farben, mit denen man die Kanten von G so färben kann, dass keine zwei benachbarten Kanten die gleiche Farbe erhalten. Kantenfärbungsprobleme treten in verschiedenen Scheduling-Anwendungen auf, typischerweise in Verbindung mit Task-Processing oder Netzwerk-Kommunikation. Da das Kantenfärbungsproblem NP-schwer ist, sind gute Approximationsalgorithmen gefordert. In dieser Dissertation werden verschiedene Färbungstechniken erweitert und neue Färbungsalgorithmen entworfen. Ausgehend von einem klassischen Resultat von Vizing, wird ein neuer Graphenparameter - die Fächerzahl - vorgestellt. Dies führt zu einem Färbungsalgorithmus, der durch eine spezielle Kantensortierung Vizings Fächer in bestmöglicher Weise nutzen kann. Eines der größten bisher ungelösten Probleme auf dem Gebiet der Kantenfärbungen ist Goldbergs Vermutung. Goldberg (und unabhängig davon auch Andersen und Seymour) vermutete eine obere Schranke für den chromatischen Index chi', die vom Maximalgrad Delta und einer maximalen Dichte w abhängt, und zwar chi'<=max{Delta+1,w}. Da Delta und w beides untere Schranken für chi' sind, hat Goldbergs Schranke somit eine absolute Abweichung von höchstens 1 vom Optimum. In dieser Dissertation werden einige neue obere Schranken für chi' entwickelt, die die Lücke zwischen den bereits bekannten Schranken und Goldbergs vermuteter Schranke verkleinert. Die beiden wichtigsten neuen Schranken sind max{Delta+1+(Delta-2)/14,w} und max{Delta+sqrt((Delta-1)/2),w}. Die Laufzeiten der zugehörigen Färbungsalgorithmen sind polynomiell beschränkt bzgl. der Eckenzahl und der Kantenzahl des zu färbenden Graphen. Da aber ein Graph einfach durch Angabe der Ecken und Kantenvielfachheiten beschrieben werden kann, sind die genannten Algorithmen somit keine echten Polynomialzeitalgorithmen. Im letzten Kapitel der Dissertation wird allerdings gezeigt, wie sich durch alternative Datenstrukturen und ein ivide-and-Conquer-Verfahren diese Algorithmen auch als Polynomialzeitalgorithmen implementieren lassen.
