Higher-order contracts for JavaScript
Abstract: JavaScript ist eine schwach typisierten und dynamische Programmiersprache mit Objekten und Funktionen erster Klasse. Obwohl JavaScript am meisten als clientseitige Skriptsprache für Webseiten bekannt ist wird sie mittlerweile auch vermehrt für nicht-Browser Entwicklungen eingesetzt, wie zum Beispiel für die Entwicklung von serverseitigen Anwendungen mit Node.js, für Spieleentwicklungen, für die Entwicklung von plattformunabhängigen Handy Applikationen, oder als Zwischensprache für andere Sprachen wie TypeScript oder Dart.<br><br>Leider besitzt JavaScript selbst nur ein geringes Sicherheitsbewusstsein: es gibt einen globalen Bereich für Funktionen und Variablen, alle Skripte haben die gleichen Rechte, und jeder kann alles verändern, von den Feldern und Methoden eines Objekts, über die Prototype-Eigenschaft, bis hin zu dem Sichtbarkeitsbereich von Variablen innerhalb einer Funktion. Die Konsequenz davon ist, dass JavaScript anfällig für Code-Injektion ist, Bibliotheken alles lesen können was über den globalen Bereich erreichbar ist und fremder Code Zugriff auf sensibel Daten bekommen kann. Darüberhinaus können unerwartete Seiteneffekte entstehen und Verständnis und Wartung von JavaScript Programmcode werden erschwert.<br><br>Um diesen Einschränkungen entgegenzuwirken schlagen wir die Verwendung von einem Vertragssystem mit Laufzeitüberwachung vor. Vertragssysteme wurden mit Meyer’s Design by Contract Technologie eingeführt und sehen die Definition von Invarianten für Objekte, sowie Hoare-ähnliche Vor- und Nachbedingungen für Funktionen vor. Gerade für dynamisch typisierte Sprachen sind Vertragssysteme interessant da sie starke Programmgarantien ermöglichen ohne dabei die Flexibilität und Ausdrucksstärke der Sprache einzuschränken.<br><br>Diese Dissertation präsentiert Design und Implementierung von TreatJS, einem Ver- tragssystem höherer Ordnung für JavaScript. Neben den Standard Abstraktionen für Verträge stellt TreatJS Schnitt- und Vereinigungsoperatoren für Verträge und einen Vertragskonstruktor, welcher Verträge mittels Abstraktion zur Laufzeit erzeugt, zur Verfügung. Vertragskonstruktoren sind die Bauelemente für alle zustandsbehafteten Vertrage, wie zum Beispiel argumentabängige Verträge, parametrierbare Verträge oder rekursive Verträge.<br><br>Eine weitere Neuerung in TreatJS ist die Verwendung von Constraints zur Berechnung von Schuldzuweisungen nach Vertr ...
Abstract: JavaScript is an untyped and dynamic programming language with objects and first-class functions. While it is most well-known as the client-side scripting language for websites, it is also increasingly used for non-browser development, such as developing server-side applications with Node.js, for game development, to implement platform-independent mobile applications, or as a compilation target for other languages like TypeScript or Dart.<br><br>Unfortunately, JavaScript itself has no real security awareness: there is a global scope for functions and variables, all scripts have the same authority, and everything can be modified, from the fields and methods of an object over its prototype property to the scope chain of a function closure. As a consequence, JavaScript code is prone to injection attacks, library code can read and manipulate everything reachable from the global scope, and third-party code can get access to sensitive data. Furthermore, side effects may cause unexpected behavior so that program understanding and maintenance become difficult.<br><br>To overcome these limitations, we propose using contracts with runtime monitoring. Software contracts were introduced with Meyer’s Design by Contract methodology which stipulates invariants for objects as well as Hoare-like pre- and postconditions for functions. Contract monitoring has become a prominent mechanism to provide strong guarantees for programs in dynamically typed languages while preserving their flexibility and expressiveness.<br><br>This dissertation presents the design and implementation of TreatJS, a language-embedded, higher-order contract system for JavaScript which enforces contracts by runtime monitoring. Beyond the standard abstractions for higher-order contracts (flat contracts, function contracts, dependent contracts), TreatJS provides intersection and union operators for contracts and a contract constructor that constructs and composes contracts at runtime using contract abstraction. Contract constructors are the building blocks for dependent contracts, parameterized contracts, and recursive contracts.<br><br>Another novel aspect is TreatJS’s use of constraints to create a structure for computing positive and negative blame according to the semantics of subject and context satisfaction, respectively. Moreover, it applies a compatibility check to distinguish contracts from different sides of an intersection or union, and it provides three general monitoring semanti ...
