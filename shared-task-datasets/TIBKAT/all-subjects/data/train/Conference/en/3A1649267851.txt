Software Reuse: Methods, Techniques, and Tools : 7th International Conference, ICSR-7 Austin, TX, USA, April 15â€“19, 2002 Proceedings
As a result of the open-source movement there is now a great deal of reusable software available in the public domain. This offers significant functionality that commercial software vendors can use in their software projects. Open-source approaches to software development have illustrated that complex, mission critical software can be developed by distributed teams of developers sharing a common goal. Commercial software vendors have an opportunity to both learn from the op- source community as well as leverage that knowledge for the benefit of its commercial clients. Nonetheless, the open-source movement is a diverse collection of ideas, knowledge, techniques, and solutions. As a result, it is far from clear how these approaches should be applied to commercial software engineering. This paper has looked at many of the dimensions of the open-source movement, and provided an analysis of the different opportunities available to commercial software vendors. References and Notes 1. It can be argued that the open-source community has produced really only two essential 9 products -- Apache (undeniably the most popular web server) and Linux although both are essentially reincarnations of prior systems. Both are also somewhat products of their times: Apache filled a hole in the then emerging Web, at a time no platform vendor really knew how to step in, and Linux filled a hole in the fragmented Unix market, colored by the community s general anger against Microsoft. 2.Evans Marketing Services, Linux Developers Survey, Volume 1, March 2000.
Integrating and Reusing GUI-Driven Applications -- Source Tree Composition -- Layered Development with (Unix) Dynamic Libraries -- Early-Reply Components: Concurrent Execution with Sequential Reasoning -- Concepts and Guidelines of Feature Modeling for Product Line Software Engineering -- Domain Modeling for World Wide Web Based Software Product Lines with UML -- Enhancing Component Reusability through Product Line Technology -- Modeling Variability with the Variation Point Model -- Reusing Open-Source Software and Practices: The Impact of Open-Source on Commercial Vendors -- Integrating Reference Architecture Definition and Reuse Investment Planning -- Control Localization in Domain Specific Translation -- Model Reuse with Metamodel-Based Transformations -- Generation of Text Search Applications for Databases. An Exercise on Domain Engineering -- Domain Networks in the Software Development Process -- Supporting Reusable Use Cases -- Project Management Knowledge Reuse through Scenario Models -- Adaptation of Coloured Petri Nets Models of Software Artifacts for Reuse -- Improving Hazard Classification through the Reuse of Descriptive Arguments -- Service Oriented Programming: A New Paradigm of Software Reuse -- An Empirical User Study of an Active Reuse Repository System -- Towards the Formalization of a Reusability Framework for Refactoring -- Service Facilities: Extending Abstract Factories to Decouple Advanced Dependencies -- Software Fortresses -- The Case against a Grand Unification Theory -- ICSR7 Young Researchers Workshop -- International Workshop on Reuse Economics -- Workshop on Generative Programming 2002 (GP2002) -- ICSR7 Workshop on Component-Based Software Development Processes -- Industrial Experience with Product Line Approaches -- Workshop on Software Reuse and Agile Approaches -- Software Architecture Quality Analysis Methods -- Tutorial on Practical Product Line Scoping and Modeling -- Transformation Systems: Generative Reuse for Software Generation, Maintenance and Reengineering -- Component-Based Product-Line Engineering with the UML -- Building Reusable Test Assets for a Product Line -- Architecture-Centric Software Engineering -- Practical Strategies and Techniques for Adopting Software Product Lines -- Generative Programming: Methods, Techniques, and Applications Tutorial Abstract.
