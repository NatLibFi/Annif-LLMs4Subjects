Hardware and Software, Verification and Testing : First International Haifa Verification Conference, Haifa, Israel, November 13-16, 2005, Revised Selected Papers
The First Haifa Verification Conference was held at the IBM Haifa Research Lab and at the Haifa University in Israel from November 13 to16, 2005. The conference incorporated three different workshops that took place separately in previous years. The IBM Verification Workshop is now its sixth year, the IBM Software Testing Workshop is now in its fourth year, and the PADTAD Workshop on testing and debugging multi-threaded and parallel software was held for the third time. The Verification Conference was a three-day, single-track conference followed by a one-day tutorial on the testing and review of multi-threaded code. The conference presented a unique combination of fields that brought together the hardware and software testing communities. Merging the different communities under a single roof gave the conference a distinctive flavor and provided the participants with added benefits. While the applications in these separate fields are different, the techniques used are often very similar. By offering lectures in these disparate but related disciplines, the conference engendered an environment of collaboration and discovery.
Hardware Verification -- Path-Based System Level Stimuli Generation -- The Safety Simple Subset -- A Case for Runtime Validation of Hardware -- Assertion-Based Verification for the SpaceCAKE Multiprocessor â€“ A Case Study -- Simultaneous SAT-Based Model Checking of Safety Properties -- HaifaSat: A New Robust SAT Solver -- Software Testing -- Production-Testing of Embedded Systems with Aspects -- Assisting the Code Review Process Using Simple Pattern Recognition -- An Extensible Open-Source Compiler Infrastructure for Testing -- Effective Black-Box Testing with Genetic Algorithms -- Optimal Algorithmic Debugging and Reduced Coverage Using Search in Structured Domains -- Benchmarking and Testing OSD for Correctness and Compliance -- PADTAD -- A Kernel-Based Communication Fault Injector for Dependability Testing of Distributed Systems -- Detecting Potential Deadlocks with Static Analysis and Run-Time Monitoring -- Dynamic Deadlock Analysis of Multi-threaded Programs -- Verification of the Java Causality Requirements -- Choosing Among Alternative Futures.
