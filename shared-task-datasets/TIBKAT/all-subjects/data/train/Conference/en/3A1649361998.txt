Software Engineering — ESEC/FSE ’99 : 7th European Software Engineering Conference Held Jointly with the 7th ACM SIGSOFT Symposium on the Foundations of Software Engineering Toulouse, France, September 6–10, 1999 Proceedings
For the second time, the European Software Engineering Conference is being held jointly with the ACM SIGSOFT Symposium on the Foundations of Software Engine- ing (FSE). Although the two conferences have different origins and traditions, there is a significant overlap in intent and subject matter. Holding the conferences jointly when they are held in Europe helps to make these thematic links more explicit, and enco- ages researchers and practitioners to attend and submit papers to both events. The ESEC proceedings have traditionally been published by Springer-Verlag, as they are again this year, but by special arrangement, the proceedings will be distributed to members of ACM SIGSOFT, as is usually the case for FSE. ESEC/FSE is being held as a single event, rather than as a pair of collocated events. Submitted papers were therefore evaluated by a single program committee. ESEC/FSE represents a broad range of software engineering topics in (mainly) two continents, and consequently the program committee members were selected to represent a spectrum of both traditional and emerging software engineering topics. A total of 141 papers were submitted from around the globe. Of these, nearly half were classified as research - pers,aquarterasexperiencepapers,andtherestasbothresearchandexperiencepapers. Twenty-nine papers from five continents were selected for presentation and inclusion in the proceedings. Due to the large number of industrial experience reports submitted, we have also introduced this year two sessions on short case study presentations.
Extreme Programming: A Discipline of Software Development -- Components and Generative Programming -- A Component and Communication Model for Push Systems -- A Fine-Grained Model for Code Mobility -- Robots: A Real-Time Systems Architectural Style -- Collaboration and Composition: Issues for a Second Generation Process Language -- Using UML for Software Process Modeling -- A Probabilistic Model for Software Projects -- Designing Specification Languages for Process Control Systems: Lessons Learned and Steps to the Future? -- Using Model Checking to Generate Tests from Requirements Specifications -- Specification-Based Prototyping for Embedded Systems’ -- Coping with Type Casts in C -- Efficient Points-to Analysis for Whole-Program Analysis -- The Concept of Dynamic Analysis -- Data-Flow Analysis of Program Fragments -- Yesterday, my Program Worked. Today, it Does Not. Why? -- Comparison Checking: An Approach to Avoid Debugging of Optimized Code -- Structural Specification-Based Testing: Automated Support and Experimental Evaluation -- An Efficient Relevant Slicing Method for Debugging -- Analyzing Exception Flow in Java™ Programs -- An Efficient Algorithm for Computing MHP Information for Concurrent Java Programs -- CoffeeStrainer: Statically-Checked Constraints on the Definition and Use of Types in Java -- The CIP Method: Component- and Model-Based Construction of Embedded Systems -- Algebraic Software Architecture Reconfiguration -- Consistency Checking for Multiple View Software Architectures -- Synergy Between Component-Based and Generative Approaches -- Transitioning Legacy Assets to a Product Line Architecture -- CHIME: A Metadata-Based Distributed Software Development Environment -- FACADE: A Typed Intermediate Language Dedicated to Smart Cards -- Verification of Real-Time Designs: Combining Scheduling Theory with Automatic Formal Verification -- Checking Progress with Action Priority: Is it Fair?.
