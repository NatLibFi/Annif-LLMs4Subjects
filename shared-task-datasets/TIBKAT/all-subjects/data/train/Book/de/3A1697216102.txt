Nutzerverhalten verstehen – Softwarenutzen optimieren : Kommunikationsanalyse bei der Softwareentwicklung
Software muss nicht nur technische Definitionen, Standards und Normen erfüllen, sondern von ihren Benutzern auch entsprechend wahrgenommen werden. Nutzer und Käufer erwarten eine bestimmte Leistung, die zu den eigenen Zielen passen muss und es ist Aufgabe der Softwareentwickler, diese Leistung zu liefern. Da es hierbei nie eine vollständige Passung geben kann, entsteht ein Kommunikationsproblem – ein Kommunikationsproblem zwischen Menschen, das noch zu selten ernstgenommen wird. Über bekannte Ansätze hinausgehend zeigt das Buch anhand vieler praxisnaher Beispiele ein Verfahren, mit dem Sie Kommunikationsprobleme während der Entwicklung von Software aufdecken und bearbeiten und mit dem Sie auch nach der Veröffentlichung Ihrer Software Möglichkeiten der Optimierung identifizieren können. Zusätzliche Fragen per App: Laden Sie die Springer Nature Flashcards-App kostenlos herunter und nutzen Sie exklusives Zusatzmaterial, um an weiteren Beispielen zu üben und Ihr Wissen zu prüfen. Der Inhalt Einleitung: Was Software-Qualität mit menschlicher Kommunikation zu tun hat Kommunikation bei der Software-Entwicklung Über die Beziehung von Nutzer*in, Software und Nutzungssituation Softwarenutzung strukturiert beobachten Strukturelle Analyse der Beobachtungsdaten Analyseergebnisse interpretieren: Software als Medium und Schnittstelle, Quality of Interaction und Gestaltungsnormen Der Autor Dr. Mario Donick ist Kommunikationswissenschaftler. Er studierte Germanistik und Geschichte an der Universität Rostock und war dort bis 2013 wissenschaftlicher Mitarbeiter am Institut für Informatik. 2016 erschien seine Dissertation zu Unsicherheit und Ordnung der Computernutzung. Seitdem arbeitet er im und zum technischen Kundenservice und ist Autor und Entwickler. Zuletzt erschien sein Sachbuch „Die Unschuld der Maschinen“.
Einleitung: Was Software-Qualität mit menschlicher Kommunikation zu tun hat -- Kommunikation bei der Software-Entwicklung -- Über die Beziehung von Nutzer*in, Software und Nutzungssituation -- Softwarenutzung strukturiert beobachten -- Strukturelle Analyse der Beobachtungsdaten -- Analyseergebnisse interpretieren: Software als Medium und Schnittstelle, Quality of Interaction und Gestaltungsnormen.
