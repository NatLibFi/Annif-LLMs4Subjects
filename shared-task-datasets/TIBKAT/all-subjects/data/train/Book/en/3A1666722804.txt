Design Patterns in .NET : Reusable Approaches in C# and F# for Object-Oriented Software Design
Part I: Introduction -- Chapter 1: The SOLID Design Principles -- Chapter 2: The Functional Perspective -- Part II: Creational Patterns -- Chapter 3: Builder -- Chapter 4: Factories -- Chapter 5: Prototype -- Chapter 6: Singleton . Part III: Structural Patterns -- Chapter 7: Adapter -- Chapter 8: Bridge -- Chapter 9: Composite -- Chapter 10: Decorator -- Chapter 11: Façade -- Chapter 12: Flyweight -- Chapter 13: Proxy -- Part IV: Behavioral Patterns. - Chapter 14: Chain of Responsibility -- Chapter 15: Command -- Chapter 16: Interpreter -- Chapter 17: Iterator -- Chapter 18: Mediator -- Chapter 19: Memento -- Chapter 20: Null Object -- Chapter 21: Observer -- Chapter 22: State -- Chapter 23: Strategy -- Chapter 24: Template Method -- Chapter 25: Visitor
Implement design patterns in .NET using the latest versions of the C# and F# languages. This book provides a comprehensive overview of the field of design patterns as they are used in today’s developer toolbox. Using the C# programming language, Design Patterns in .NET explores the classic design pattern implementation and discusses the applicability and relevance of specific language features for the purpose of implementing patterns. You will learn by example, reviewing scenarios where patterns are applicable. MVP and patterns expert Dmitri Nesteruk demonstrates possible implementations of patterns, discusses alternatives and pattern inter-relationships, and illustrates the way that a dedicated refactoring tool (ReSharper) can be used to implement design patterns with ease. What You'll Learn: Know the latest pattern implementations available in C# and F# Refer to researched and proven variations of patterns Study complete, self-contained examples including many that cover advanced scenarios Use the latest implementations of C# and Visual Studio/ReSharper This book is for developers who have some experience in the C# language and want to expand their comprehension of the art of programming by leveraging design approaches to solving modern problems. Dmitri Nesteruk is a quantitative analyst, developer, course and book author, and an occasional conference speaker. His interests lie in software development and integration practices in the areas of computation, quantitative finance, and algorithmic trading. His technological interests include C# and C++ programming as well as high-performance computing using technologies such as CUDA and FPGAs. He has been a C# MVP since 2009
