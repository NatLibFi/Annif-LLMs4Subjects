Interpreting LISP : Programming and Data Structures
Learn Lisp programming in a data structures context, including tables, functions, forms, expressions, typed-pointers, I/O, garbage collection and some applications. This short primer contains a careful description of the data structures manipulated by LISP functions. These data structures and others, notably hash tables, are also used in constructing a Lisp interpreter. Interpreting LISP will be of special interest to those learning and using programming languages and computer architecture as well as data structures. This book will be useful to autodidacts, professional programmers, and computer enthusiasts in a wide variety of fields. You will: Use the atom table and the number table in LISP Master expressions, typed pointers, arguments and results in typed pointers, and more Write lambda expressions in LISP Bind actual values to formal arguments Develop games in LISP
LISP -- The atom table and the number table -- Evaluation -- Some functions and special forms -- S-Expressions -- Typed-pointers -- Pictorial notation -- Arguments and results are typed-pointers -- List notation -- More special forms -- Defining functions: -Expressions -- More functions -- Defining special forms -- The label special form -- The quote macro -- More functions -- More about typed-pointers -- Binding actual values to formal arguments -- Minimal LISP -- More functions -- Input and output -- Property lists -- What is LISP good for? -- Symbolic differentiation -- Game playing -- The LISP interpreter program -- Garbage collection -- The lispinit file, and linuxenx.h file, and the makefile file
