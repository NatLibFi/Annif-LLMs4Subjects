Usage-Driven Database Design : From Logical Data Modeling through Physical Schema Definition
Part I: Introduction -- 1. Introduction to Usage-Driven Database Design -- Part II: Logical Data Modeling -- 2. The E-R Approach -- 3. More About the E-R Approach -- 4. Building the Logical Data Model -- 5. LDM Best Practices -- 6. LDM Pitfalls -- 7. LDM Perils to Watch For -- Part III: Physical Schema Definition -- 8. Introduction to Physical Database Design -- 9. Introduction to Physical Schema Definition -- 10. Transformation: Creating the Physical Data Model.-11. Utilization: Merging Data and Process.-12. Formalization: Creating a Schema  -- 13. Customization: Enhancing Performance -- 14. The Data Warehouse -- 15. The Big Data Decision Support System -- Part IV: Where From Here? -- 16. A Look Ahead -- Part V: Appendixes -- 17: Appendix A: Glossary -- 18: Appendix B: Logical Data Modeling Definitions -- 19. Appendix C: Physical Schema Definition Object Definitions -- 20. Appendix D: Formulas Used in the Book -- 21. Appendix E: List of U3D Deliverables
Design great databases-from logical data modeling through physical schema definition. You will learn a framework that finally cracks the problem of merging data and process models into a meaningful and unified design that accounts for how data is actually used in production systems. Key to the framework is a method for taking the logical data model that is a static look at the definition of the data, and merging that static look with the process models describing how the data will be used in actual practice once a given system is implemented. The approach solves the disconnect between the static definition of data in the logical data model and the dynamic flow of the data in the logical process models. The design framework in this book can be used to create operational databases for transaction processing systems, or for data warehouses in support of decision support systems. The information manager can be a flat file, Oracle Database, IMS, NoSQL, Cassandra, Hadoop, or any other DBMS. Usage-Driven Database Design emphasizes practical aspects of design, and speaks to what works, what doesnâ€™t work, and what to avoid at all costs. Included in the book are lessons learned by the author over his 30+ years in the corporate trenches. Everything in the book is grounded on good theory, yet demonstrates a professional and pragmatic approach to design that can come only from decades of experience. Presents an end-to-end framework from logical data modeling through physical schema definition. Includes lessons learned, techniques, and tricks that can turn a database disaster into a success. Applies to all types of database management systems, including NoSQL such as Cassandra and Hadoop, and mainstream SQL databases such as Oracle and SQL Server
