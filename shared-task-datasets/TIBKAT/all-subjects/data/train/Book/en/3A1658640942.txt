Physically Based Shader Development for Unity 2017 : Develop Custom Lighting Systems
Chapter 1: How Shader Development Works -- Chapter 2: Your first Unity Shader -- Chapter 3: Your first Lighting Unity shader -- Chapter 4: What is Physically Based Shading? -- Chapter 5: Your first Physically Based Shader -- Chapter 6: Your first Image Effect -- Chapter 7: HDR, Tone Mapping and Color Grading -- Chapter 8: The Ethology of BRDFs -- Chapter 9: The Implementation of BRDFs -- Chapter 10: Approximate your BRDFs -- Chapter 11: How the Standard Shader works -- Chapter 12: The Unity Standard Shader Subsystems, and What They Can Do for You -- Chapter 13: Hooking into the Unity Shader Subsystems -- Chapter 14: Reflections and Cube Maps -- Chapter 15: Making Shaders Artists Will Use -- Chapter 16: Code Complexity and Ubershaders -- Chapter 17: When Shading Goes Wrong, Check The Models -- Chapter 18: Resources to Keep Up with the Bleeding Edge, and How to Read Them.
Benefit from the latest rendering tech developments, currently covered only in papers and talks from Siggraph, in a way any developer or technical artist using Unity can take advantage of. This book starts by introducing how shader programming works in general, the common principles of different platforms (OpenGL, Vulkan, and DirectX), and the shading languages Unity uses: Cg, GLSL, and ShaderLab. Physically Based Shader Development for Unity 2017 discusses artistic choices, presenting various techniques (such as translucency and subsurface scattering) and BRDFs (Oren-Nayar, Cook-Torrance, and Ashikhmin-Shirley), and what they can be used for. Finally you’ll cover the importance of optimizing your code by developing approximations, which achieve similar end results, but are computationally cheaper. By the end of your journey you’ll be able to develop the look of your game or Unity-rendered animated short so that it looks both unique and impressively realistic, thanks to your own custom lighting system. You will: Master shader programming Gain all you need to know about physically based shading Take almost full control of the shader subsystem Discover what you can achieve with that control Implement a custom physically based lighting system and examine the logic behind every choice.
