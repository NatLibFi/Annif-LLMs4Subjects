Parallelization of automotive control software
Der eingebettete Mehrkernprozessor wird als die Hardware-Plattform angesehen, welche den stetig steigenden Rechenanforderungen von Steuerungs-Software in Automobilen gerecht wird. Dieser verfügt über eine höhere Rechenleistung und verbraucht weniger Energie. Steuerungs-Software wird entsprechend dem AUTomotive Open System ARchitecture (AUTOSAR)- Standard entwickelt. Runnables, elementare Code-Abschnitte, bilden strukturiert in Software-Components angeordnet das funktionale Verhalten des Reglers ab. Bei der Migration auf Mehrkernprozessoren soll existierende Steuerungs-Software wiederverwendet werden. Gegenstand der Dissertation ist die Migration existierender AUTOSAR-Steuerungs-Software auf Mehrkernprozessorsteuergeräte. Zentrale Herausforderungen sind: 1) Datenabhängigkeiten zwischen Runnables müssen beachtet werden, was die erreichbare Parallelität einschränkt. 2) Der ursprüngliche Datenfluss und dessen Latenz müssen nachgebildet werden, um dasselbe funktionale Verhalten ohne aufwändige Validierung oder Tests zu erreichen. 3) Das Energiesparpotenzial des Prozessors soll genutzt werden. Auf Runnable-Ebene verteilt RunPar Runnables statt Tasks. Darüber hinaus wird die Parallelität durch das Konzept der Supertask erhöht. Diese gruppiert Runnables von nacheinander ausgeführten Tasks, deren Runnables anschließend mittels RunPar verteilt werden. Auf Task-Ebene entkoppelt Timed Implicit Communication (TIC) die Kommunikation zwischen Tasks, um die parallele Ausführung von produzierender und konsumierender Task zu ermöglichen. Ein Vergleich mit RunPar legt nahe, dass es sich bei Runnable- und Task-Ebenen-Parallelisierung um einander ergänzend einzusetzende Strategien handelt. Schließlich wird eine koordinierende Strategie vorgeschlagen, welche beide Parallelisierungsebenen kombiniert. Der Verarbeitungspfad von Sensor zu Aktuator wird explizit modelliert. Dies ermöglicht die Berücksichtigung der Latenz. Task-Perioden und Prozessortakt werden anschließend so angepasst, dass Leerlaufzeiten minimiert und Latenzzeiten eingehalten werden. Die Metrik Parallel-Schedule-Quality- wird eingeführt, um den Erfolg der Parallelisierung zu quantifizieren. Damit wird es möglich den besten parallelen Ausführungsplan auszuwählen. Insgesamt wird dieselbe Antwortzeit wie im Referenzsystem erreicht. Gleichzeitig wird der Energieverbrauch des Steuergerätes minimiert.
