Metric temporal graph logic over typed attributed graphs
Graph repair, restoring consistency of a graph, plays a prominent role in several areas of computer science and beyond: For example, in model-driven engineering, the abstract syntax of models is usually encoded using graphs. Flexible edit operations temporarily create inconsistent graphs not representing a valid model, thus requiring graph repair. Similarly, in graph databases—managing the storage and manipulation of graph data—updates may cause that a given database does not satisfy some integrity constraints, requiring also graph repair. We present a logic-based incremental approach to graph repair, generating a sound and complete (upon termination) overview of least-changing repairs. In our context, we formalize consistency by so-called graph conditions being equivalent to first-order logic on graphs. We present two kind of repair algorithms: State-based repair restores consistency independent of the graph update history, whereas deltabased (or incremental) repair takes this history explicitly into account. Technically, our algorithms rely on an existing model generation algorithm for graph conditions implemented in AutoGraph. Moreover, the delta-based approach uses the new concept of satisfaction (ST) trees for encoding if and how a graph satisfies a graph condition. We then demonstrate how to manipulate these STs incrementally with respect to a graph update. Verschiedene Arten typisierter attributierter Graphen können verwendet werden, um Systemzustände aus einem breiten Bereich von Domänen darzustellen. Für dynamische Systeme können etablierte Formalismen wie die Graphtransformation ein formales Modell für die Definition von Zustandssequenzen liefern. Wir betrachten den Fall, in dem zwischen Zustandsänderungen Zeit vergehen kann, und führen eine Logik ein, die als Metric Temporal Graph Logic (MTGL) bezeichnet wird, um über solche zeitgesteuerten Graphsequenzen zu urteilen. Mit dieser Logik drücken wir Eigenschaften der Struktur und der Attribute von Zuständen sowie des Auftretens von Zuständen über die Zeit aus, die durch ihre innere Struktur miteinander verbunden sind, was bisher keine formale Logik über Graphen präzise bewerkstelligt. Erstens, basierend auf zeitgesteuerten Graphsequenzen als Modelle für die Systemevolution, definieren wir MTGL, indem wir den zeitlichen Operator bis zu einer gewissen Zeitgrenze in die etablierte Logik von (verschachtelten) Graphbedingungen integrieren. Zweitens skizzieren wir, wie eine endliche zeitgesteuerte Diagrammsequenz als einzelnes Diagramm dargestellt werden kann, das alle zeitlichen Änderungen enthält (als Diagramm mit Verlauf bezeichnet), wie die Erfüllung von MTGL-Bedingungen für ein solches Diagramm definiert werden kann, und zeigen, dass beide Darstellungen dieselben MTGL-Bedingungen erfüllen. Drittens zeigen wir, wie MTGL-Bedingungen auf (verschachtelte) Diagrammbedingungen reduziert werden können, und zeigen anhand dieser Reduzierung, dass beide zugrunde liegenden Logiken gleichermaßen aussagekräftig sind. Schließlich stellen wir eine Erweiterung des Tools AutoGraph vor, mit der die Erfüllung der MTGL-Bedingungen für zeitgesteuerte Diagrammsequenzen überprüft werden kann, indem die Erfüllung der (verschachtelten) Diagrammbedingungen überprüft wird, die unter Verwendung der vorgeschlagenen Reduzierung für das Diagramm mit dem Verlauf entsprechend dem zeitgesteuerten Diagramm erhalten wurden.
Graph repair, restoring consistency of a graph, plays a prominent role in several areas of computer science and beyond: For example, in model-driven engineering, the abstract syntax of models is usually encoded using graphs. Flexible edit operations temporarily create inconsistent graphs not representing a valid model, thus requiring graph repair. Similarly, in graph databases—managing the storage and manipulation of graph data—updates may cause that a given database does not satisfy some integrity constraints, requiring also graph repair. We present a logic-based incremental approach to graph repair, generating a sound and complete (upon termination) overview of least-changing repairs. In our context, we formalize consistency by so-called graph conditions being equivalent to first-order logic on graphs. We present two kind of repair algorithms: State-based repair restores consistency independent of the graph update history, whereas deltabased (or incremental) repair takes this history explicitly into account. Technically, our algorithms rely on an existing model generation algorithm for graph conditions implemented in AutoGraph. Moreover, the delta-based approach uses the new concept of satisfaction (ST) trees for encoding if and how a graph satisfies a graph condition. We then demonstrate how to manipulate these STs incrementally with respect to a graph update.
