C# Deconstructed
C# Deconstructed answers a seemingly simply question: Just what is going on, exactly, when you run C# code on the .NET Framework? To answer this question we will dig ever deeper into the structure of the C# language and the onion-skin abstraction layers of the .NET Framework that underpins it. We’ll follow the execution thread downwards, first to MSIL (Microsoft Intermediate Language) then down through just-in-time compilation into Machine Code before finally seeing the results executed at the hardware level. The aim of this deep-dive is to provide you with a much more rounded knowledge of the environment within which you code exists. As a managed language, it’s best-practice to let the Framework deal with device interaction but you’ll find the experience of taking the cover off once in a while a very rewarding one that will greatly enrich your appreciate of the C# language and the way in which in functions
C♯ Deconstructed answers a seemingly simply question: Just what is going on, exactly, when you run C♯ code on the .NET Framework? To answer this question we will dig ever deeper into the structure of the C♯ language and the onion-skin abstraction layers of the .NET Framework that underpins it. We?ll follow the execution thread downwards, first to MSIL (Microsoft Intermediate Language) then down through just-in-time compilation into Machine Code before finally seeing the results executed at the hardware level. The aim of this deep-dive is to provide you with a much more rounded knowledge of the environment within which you code exists. As a managed language, it?s best-practice to let the Framework deal with device interaction but you?ll find the experience of taking the cover off once in a while a very rewarding one that will greatly enrich your appreciate of the C♯ language and the way in which in functions
