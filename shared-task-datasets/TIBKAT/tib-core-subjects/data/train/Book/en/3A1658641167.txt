Reusable Firmware Development : A Practical Approach to APIs, HALs and Drivers
Gain the knowledge and skills necessary to improve your embedded software and benefit from author Jacob Beningoâ€™s more than 15 years developing reusable and portable software for resource-constrained microcontroller-based systems. You will explore APIs, HALs, and driver development among other topics to acquire a solid foundation for improving your own software. Reusable Firmware Development: A Practical Approach to APIs, HALs and Drivers not only explains critical concepts, but also provides a plethora of examples, exercises, and case studies on how to use and implement the concepts. You will: Develop portable firmware using the C programming language Discover APIs and HALs, explore their differences, and see why they are important to developers of resource-constrained software  Master microcontroller driver development concepts, strategies, and examples Write drivers that are reusable across multiple MCU families and vendors Improve the way software documented Design APIs and HALs for microcontroller-based systems
Chapter 1 Concepts for Developing Portable Firmware -- Chapter 2 API and HAL Fundamentals -- Chapter 3 Device Driver Fundamentals in C -- Chapter 4 Writing Reusable Drivers -- Chapter 5 Documenting Firmware with Doxygen -- Chapter 6 The Hardware Abstraction Layer Design Process -- Chapter 7 HAL Design for GPIO -- Chapter 8 HAL Design for SPI -- Chapter 9 HAL Design for EEPROM and Memory Devices -- Chapter 10 API Design for Embedded Applications -- Chapter 11 Testing Portable Embedded Software -- Chapter 12 A Practical Approach to Code Reuse -- Final Thoughts
