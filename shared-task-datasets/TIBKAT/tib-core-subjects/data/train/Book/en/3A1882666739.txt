Introduction to Quantum Computing : From a Layperson to a Programmer in 30 Steps
The Most Important Step to Understand Quantum Computing -- First Impression -- Basis, Basis Vectors, and Inner Product -- Orthonormal Basis, Bra-Ket Notation, and Measurement -- Changing Basis, Uncertainty Principle, and Bra-ket Operations -- Observables, Operators, Eigenvectors, and Eigenvalues -- Pauli Spin Matrices, Adjoint Matrix, and Hermitian Matrix -- Operator Rules, Real Eigenvalues, and Projection Operator -- Eigenvalue and Matrix Diagonalization; Unitary Matrix -- Unitary Transformation, Completeness, and Construction of Operator -- Hilbert Space, Tensor Product, and Multi-Qubit -- Tensor Product of Operators, Partial Measurement, and Matrix Representation in a Given Basis -- Quantum Register and Data Processing, Entanglement and the Bell States -- Concepts Review, Density Matrix, and Entanglement Entropy -- Quantum Gate Introduction; NOT and C-NOT Gates -- SWAP, Phase Shift and CC-NOT (Toffoli) Gates -- Walsh-Hadamard Gate and its Properties -- Two Quantum Circuit Examples -- No-Cloning Theorem and Quantum Teleportation I -- Quantum Teleportation II and Entanglement Swapping -- Deutsch Algorithm -- Quantum Oracles and Construction of Quantum Gate -- Grover’s Algorithm: I -- Grover’s Algorithm: II -- Quantum Fourier Transform I -- Quantum Fourier Transform II -- Bloch Sphere and Single-Qubit Arbitrary Unitary Gate -- Quantum Phase Estimation -- Shor’s Algorithm -- The Last But Not the Least.
This textbook introduces quantum computing to readers who do not have much background in linear algebra based on the self-study experience of the author as an engineer. The author targets undergraduate and master students who are willing to spend about 60 -90 hours seriously learning quantum computing. This book is also suitable for self-study and teaching videos for each chapter and more than 200 exercises with answers are provided. Readers will be able to write their program to simulate quantum computing algorithms and run on real quantum computers on IBM-Q. Moreover, unlike books that only give superficial, “hand-waving” explanations, this book uses exact formalism so readers can continue to pursue more advanced topics based on what they learn from this book. Uses narrative to start each section with analogies that help students to grasp the critical concept quickly; Uses numerical substitutions, accompanied by Python programming and IBM-Q quantum computer programming, as examples in teaching all critical concepts; Teaching videos and more than 200 exercises with answers are provided.
