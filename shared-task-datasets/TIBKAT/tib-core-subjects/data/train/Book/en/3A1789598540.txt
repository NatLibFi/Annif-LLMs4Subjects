Robot Operating System (ROS) for Absolute Beginners : Robotics Programming Made Easy
Chapter 1: Getting Started with Ubuntu/Linux for Robotics -- Chapter 2: Fundamentals of C++ for Robotic Programming -- Chapter 3: Fundamentals of Python for Robotics Programming -- Chapter 4: Kick Starting Robot Operating System -- Chapter 5: Programming with ROS -- Chapter 6: Robotics Project Using ROS.
Start programming your own robots using Robot Operation System (ROS). Targeted for absolute beginners in ROS, Linux, and Python, this guide lets you build your own robotics projects. You'll learn the basic foundation of Ubuntu Linux. Begin with the fundamentals. Installation and useful commands will give you the basic tools you need while programming a robot. Then add useful software applications that can be used while making robots. Programming robots can be done using any of the programming languages. Most popular programming languages are Python and C++. You will incorporate the fundamentals of C++ by learning object oriented programing concepts from example and building C++ projects. Finally, tackle an ROS hands-on project to apply all the concepts of ROS you've learned. The aim of the project is to perform a dead-reckoning using a cheap mobile robot. You can command your robot's position on Rviz and your robot will move to that position! Not only will you learn to program, you'll gain hands-on experience working with hardware to create a real robot. You will: Install Ubuntu 20 Install ROS Noetic Use ROS Programming with roscpp and rospy Build a mobile robot from scratch using ROS.
