Vertically Integrated Architectures : Versioned Data Models, Implicit Services, and Persistence-Aware Programming
1. The Problem -- 2. History: How Did We Get Here? -- 3. Analysis: Whatâ€™s Going Wrong? -- 4. Five Dogmas That Hold Us Back -- 5. The Solution: Vertical Integration -- 6. The Art of Querying -- 7. The I/R Model -- 8. Implicit Services -- 9. Persistence-Aware Programming -- 10. The Client
Understand how and why the separation between layers and tiers in service-oriented architectures holds software developers back from being truly productive, and how you can remedy that problem. This book touches on fundamental academic questions and solutions in a practical and substantiated way. Strong processes and development tools can help developers write more complex software, but large amounts of code can still be directly deduced from the underlying database model, hampering developer productivity. In a world with a shortage of developers, this is bad news. More code also increases maintenance costs and the risk of bugs, meaning less time is spent improving the quality of systems. You will learn that by making relationships first-class citizens within an item/relationship model, you can develop an extremely compact query language, inspired by natural language. You will also learn how this model can serve as both a database schema and an object model upon which to build business logic. Implicit services free you from writing code for standard read/write operations, while still supporting fine-grained authorization. Vertically Integrated Architectures explains how functional schema mappings can solve database migrations and service versioning at the same time, and how all this can support any client, from free-format to fully vertically integrated types. Unleash the potential and use VIA to drastically increase developer productivity and quality
