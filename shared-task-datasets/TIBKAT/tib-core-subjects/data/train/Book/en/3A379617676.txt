Component-based software testing with UML
The main subject of the book is the description of built-in contract testing a test organization for component-based applications founded on building test artifacts directly into components. It makes individual components more controllable and observable, and thus more testable through built-in testing interfaces. These provide extra functionality that is specifically geared towards facilitating testing. It also promotes the use of component testers in components that contain test cases for checking a component?s environment, this is its run-time environment as well as associated sub-components. Since building testing into components has implications with component development, built-in contract testing is integrated with and made to complement a model-driven development method. The book describes a method for developing the testing of components in parallel with their functionality based on models. It means UML models are used to derive the testing architecture for an application, the testing interfaces and the component testers. The method also provides a process and guidelines for modeling and developing these artifacts. The book will also discuss the implications of built-in contract testing with other component- based development technologies such as product-line engineering, middleware platforms, reuse principles etc. It will also describe a new method for specifying and checking real-time properties of object-oriented, component-based real-time systems that is based on dynamic execution time analysis with optimization algorithms. TOC: Preface 1. Introduction 2. Model-based Development with UML 3. Model-based Testing with UML 4. Built-in Contract Testing in Component Development 5. Built-in Contract Testing and Implementation Technologies 6. Relation of Built-in Contract Testing to other Technologies 7. Built-in Contract Testing in Real-Time System Development References Index
