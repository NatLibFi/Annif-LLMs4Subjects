Building maintainable software : ten guidelines for future-proof code
Write short units of code -- Write simple units of code -- Write code once -- Keep unit interfaces small -- Separate concerns in modules -- Couple architecture components loosely -- Keep architecture components balanced -- Keep your codebase small -- Automotive tests -- Write clean code -- Next steps -- How SIG measures maintainability
Have you ever felt frustrated working with someone elses code? Difficult-to-maintain source code is a big problem in software development today, leading to costly delays and defects. Be part of the solution. With this practical book, youll learn 10 easy-to-follow guidelines for delivering Java software thats easy to maintain and adapt. These guidelines have been derived from analyzing hundreds of real-world systems.  Written by consultants from the Software Improvement Group (SIG), this book provides clear and concise explanations, with advice for turning the guidelines into practice. Examples for this edition are written in Java, while our companion C# book provides workable examples in that language.  -- Provided by publisher
